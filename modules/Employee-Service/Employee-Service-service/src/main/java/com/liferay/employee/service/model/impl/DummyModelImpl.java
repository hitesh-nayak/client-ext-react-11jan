/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.employee.service.model.impl;

import com.liferay.employee.service.model.Dummy;
import com.liferay.employee.service.model.DummyModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Dummy service. Represents a row in the &quot;Company_Dummy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DummyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DummyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DummyImpl
 * @generated
 */
@JSON(strict = true)
public class DummyModelImpl extends BaseModelImpl<Dummy> implements DummyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dummy model instance should use the <code>Dummy</code> interface instead.
	 */
	public static final String TABLE_NAME = "Company_Dummy";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"companyEmpId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"empFirstName", Types.VARCHAR}, {"empLastName", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"phone", Types.VARCHAR},
		{"companyName", Types.VARCHAR}, {"profImageId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyEmpId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Company_Dummy (uuid_ VARCHAR(75) null,companyEmpId LONG not null primary key,groupId LONG,companyId LONG,empFirstName VARCHAR(75) null,empLastName VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,companyName VARCHAR(75) null,profImageId LONG,createDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Company_Dummy";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dummy.empLastName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Company_Dummy.empLastName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYEMPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYNAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLASTNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DummyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _companyEmpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompanyEmpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _companyEmpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dummy.class;
	}

	@Override
	public String getModelClassName() {
		return Dummy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Dummy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Dummy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Dummy, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Dummy)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Dummy, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Dummy, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Dummy)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Dummy, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Dummy, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Dummy, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Dummy, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Dummy, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Dummy, Object>>();
		Map<String, BiConsumer<Dummy, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Dummy, ?>>();

		attributeGetterFunctions.put("uuid", Dummy::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Dummy, String>)Dummy::setUuid);
		attributeGetterFunctions.put("companyEmpId", Dummy::getCompanyEmpId);
		attributeSetterBiConsumers.put(
			"companyEmpId", (BiConsumer<Dummy, Long>)Dummy::setCompanyEmpId);
		attributeGetterFunctions.put("groupId", Dummy::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Dummy, Long>)Dummy::setGroupId);
		attributeGetterFunctions.put("companyId", Dummy::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Dummy, Long>)Dummy::setCompanyId);
		attributeGetterFunctions.put("empFirstName", Dummy::getEmpFirstName);
		attributeSetterBiConsumers.put(
			"empFirstName", (BiConsumer<Dummy, String>)Dummy::setEmpFirstName);
		attributeGetterFunctions.put("empLastName", Dummy::getEmpLastName);
		attributeSetterBiConsumers.put(
			"empLastName", (BiConsumer<Dummy, String>)Dummy::setEmpLastName);
		attributeGetterFunctions.put("email", Dummy::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Dummy, String>)Dummy::setEmail);
		attributeGetterFunctions.put("phone", Dummy::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<Dummy, String>)Dummy::setPhone);
		attributeGetterFunctions.put("companyName", Dummy::getCompanyName);
		attributeSetterBiConsumers.put(
			"companyName", (BiConsumer<Dummy, String>)Dummy::setCompanyName);
		attributeGetterFunctions.put("profImageId", Dummy::getProfImageId);
		attributeSetterBiConsumers.put(
			"profImageId", (BiConsumer<Dummy, Long>)Dummy::setProfImageId);
		attributeGetterFunctions.put("createDate", Dummy::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Dummy, Date>)Dummy::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCompanyEmpId() {
		return _companyEmpId;
	}

	@Override
	public void setCompanyEmpId(long companyEmpId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyEmpId = companyEmpId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyEmpId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyEmpId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public String getEmpFirstName() {
		if (_empFirstName == null) {
			return "";
		}
		else {
			return _empFirstName;
		}
	}

	@Override
	public void setEmpFirstName(String empFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empFirstName = empFirstName;
	}

	@JSON
	@Override
	public String getEmpLastName() {
		if (_empLastName == null) {
			return "";
		}
		else {
			return _empLastName;
		}
	}

	@Override
	public void setEmpLastName(String empLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_empLastName = empLastName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmpLastName() {
		return getColumnOriginalValue("empLastName");
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCompanyName() {
		return getColumnOriginalValue("companyName");
	}

	@JSON
	@Override
	public long getProfImageId() {
		return _profImageId;
	}

	@Override
	public void setProfImageId(long profImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profImageId = profImageId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Dummy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dummy toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Dummy>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DummyImpl dummyImpl = new DummyImpl();

		dummyImpl.setUuid(getUuid());
		dummyImpl.setCompanyEmpId(getCompanyEmpId());
		dummyImpl.setGroupId(getGroupId());
		dummyImpl.setCompanyId(getCompanyId());
		dummyImpl.setEmpFirstName(getEmpFirstName());
		dummyImpl.setEmpLastName(getEmpLastName());
		dummyImpl.setEmail(getEmail());
		dummyImpl.setPhone(getPhone());
		dummyImpl.setCompanyName(getCompanyName());
		dummyImpl.setProfImageId(getProfImageId());
		dummyImpl.setCreateDate(getCreateDate());

		dummyImpl.resetOriginalValues();

		return dummyImpl;
	}

	@Override
	public Dummy cloneWithOriginalValues() {
		DummyImpl dummyImpl = new DummyImpl();

		dummyImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		dummyImpl.setCompanyEmpId(
			this.<Long>getColumnOriginalValue("companyEmpId"));
		dummyImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		dummyImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		dummyImpl.setEmpFirstName(
			this.<String>getColumnOriginalValue("empFirstName"));
		dummyImpl.setEmpLastName(
			this.<String>getColumnOriginalValue("empLastName"));
		dummyImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		dummyImpl.setPhone(this.<String>getColumnOriginalValue("phone"));
		dummyImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		dummyImpl.setProfImageId(
			this.<Long>getColumnOriginalValue("profImageId"));
		dummyImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return dummyImpl;
	}

	@Override
	public int compareTo(Dummy dummy) {
		int value = 0;

		value = getEmpLastName().compareTo(dummy.getEmpLastName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Dummy)) {
			return false;
		}

		Dummy dummy = (Dummy)object;

		long primaryKey = dummy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Dummy> toCacheModel() {
		DummyCacheModel dummyCacheModel = new DummyCacheModel();

		dummyCacheModel.uuid = getUuid();

		String uuid = dummyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dummyCacheModel.uuid = null;
		}

		dummyCacheModel.companyEmpId = getCompanyEmpId();

		dummyCacheModel.groupId = getGroupId();

		dummyCacheModel.companyId = getCompanyId();

		dummyCacheModel.empFirstName = getEmpFirstName();

		String empFirstName = dummyCacheModel.empFirstName;

		if ((empFirstName != null) && (empFirstName.length() == 0)) {
			dummyCacheModel.empFirstName = null;
		}

		dummyCacheModel.empLastName = getEmpLastName();

		String empLastName = dummyCacheModel.empLastName;

		if ((empLastName != null) && (empLastName.length() == 0)) {
			dummyCacheModel.empLastName = null;
		}

		dummyCacheModel.email = getEmail();

		String email = dummyCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			dummyCacheModel.email = null;
		}

		dummyCacheModel.phone = getPhone();

		String phone = dummyCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			dummyCacheModel.phone = null;
		}

		dummyCacheModel.companyName = getCompanyName();

		String companyName = dummyCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			dummyCacheModel.companyName = null;
		}

		dummyCacheModel.profImageId = getProfImageId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dummyCacheModel.createDate = createDate.getTime();
		}
		else {
			dummyCacheModel.createDate = Long.MIN_VALUE;
		}

		return dummyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Dummy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Dummy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Dummy, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Dummy)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Dummy>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Dummy.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _companyEmpId;
	private long _groupId;
	private long _companyId;
	private String _empFirstName;
	private String _empLastName;
	private String _email;
	private String _phone;
	private String _companyName;
	private long _profImageId;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Dummy, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Dummy)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("companyEmpId", _companyEmpId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("empFirstName", _empFirstName);
		_columnOriginalValues.put("empLastName", _empLastName);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("profImageId", _profImageId);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("companyEmpId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("empFirstName", 16L);

		columnBitmasks.put("empLastName", 32L);

		columnBitmasks.put("email", 64L);

		columnBitmasks.put("phone", 128L);

		columnBitmasks.put("companyName", 256L);

		columnBitmasks.put("profImageId", 512L);

		columnBitmasks.put("createDate", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Dummy _escapedModel;

}